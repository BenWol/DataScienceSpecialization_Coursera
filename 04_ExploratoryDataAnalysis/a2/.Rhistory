unlink("testdir",recursive=TRUE)
library(swirl)
?swirl
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls.list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[:,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
play()
flags$Germany
flags
flags$Germany-GDR
flags$Germany-DDR
nxt()
play()
flags["Germany-DDR",]
flags[100,]
nxt()
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique()
unique_vals
lapply(unique_vals,lenght)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
play()
object.size(flags)
object.size(cls_list)
nxt()
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips <-sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
require(graphics)
# Compute P(45 < X < 55) for X Binomial(100,0.5)
sum(dbinom(46:54, 100, 0.5))
## Using "log = TRUE" for an extended range :
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
## extreme points are omitted since dbinom gives 0.
mtext("dbinom(k, log=TRUE)", adj = 0)
mtext("extended range", adj = 0, line = -1, font = 4)
mtext("log(dbinom(k))", col = "red", adj = 1)
library(swirl)
swirl()
exit
exit()
install_from_swirl("Data Analysis")
warning()
10
warning(10)
swirl()
install_from_swirl("Open Intro")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
exit
install_from_swirl("Regression Models")
install_from_swirl("Statistical Inference")
swirl()
swirl()
exit
for i = 1:100
a = 0
for (i in 1:100 ) {
a = a + 1/i
}
a
for (i in 1:100 ) {a = a + 1/i}
a=0
for (i in 1:100 ) {a = a + 1/i}
a
a=0
for (i in 1:100 ) {a + 1/i}
for (i in 1:100 ) {a <- a + 1/i}
1\ln(100)
ln(100)
log(100)
1/log(100)
a=0
for (i in 1:1000 ) {a <- a + 1/i}
a
a=0
for (i in 1:10000 ) {a <- a + 1/i}
a
a=0
for (i in 1:10 ) {a <- a + 1/i}
a
library(swirl)
swirl()
swirl()
?read.csv
mydf <- read.csv(path2csv,stringsAsFactor = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
path2csv
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_ip,package,country)
select(cran, ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, X:size, -5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
3.0.3-3.0.2
3.0.3 < 3.0.2
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version) , ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size / 2Ë†20)
mutate(cran3,size_mb = size / 2^20)
mutate(cran3,size_mb = size / 2^20,size_gb = size_mb / 2^10)
mutate(cran3,correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 !=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-
| sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(ints>0)
exit
x <- matrix(1:6, 2, 3)for(i in seq_len(nrow(x))) {    for(j in seq_len(ncol(x))) {        # print(x[i, j])    }}
x <- matrix(1:6, 2, 3)for(i in seq_len(nrow(x))) {    for(j in seq_len(ncol(x))) {         print(x[i, j])    }}
x <- matrix(1:6, 2, 3)
x
for(i in seq_len(nrow(x))) {    for(j in seq_len(ncol(x))) {        # print(x[i, j])    }}
for(i in seq_len(nrow(x))) { for(j in seq_len(ncol(x))) {print(x[i, j])}}
while(z >=2 && z<=25) {print(z)}
while(z >=2 && z<=25) {print(z),z<-1}
while(z >=2 && z<=25) {print(z) z<-1}
while(z >=2 && z<=25) {print(z); z<-1}
while(z >=2 && z<=25) {print(z); coin <- rbinom(1,1,0.5); if(coin==1) {z<-z+1}else{z<-z-1}}
z<-5
while(z >=2 && z<=25) {print(z); coin <- rbinom(1,1,0.5); if(coin==1) {z<-z+1}else{z<-z-1}}
?Sys.sleep
while(z >=2 && z<=25) {print(z); coin <- rbinom(1,1,0.5); if(coin==1) {z<-z+1}else{z<-z-1};Sys.sleep(2)}
z<-5
z<-15
while(z >=2 && z<=25) {print(z); coin <- rbinom(1,1,0.5); if(coin==1) {z<-z+1}else{z<-z-1};Sys.sleep(2)}
while(z >=2 && z<=25) {print(z); coin <- rbinom(1,1,0.5); if(coin==1) {z<-z+1}else{z<-z-1};Sys.sleep(1)}
while(z >=2 && z<=25) {print(z); coin <- rbinom(1,1,0.5); if(coin==1) {z<-z+1}else{z<-z-1};Sys.sleep(0.1)}
z<-8
while(z >=2 && z<=25) {print(z); coin <- rbinom(1,1,0.5); if(coin==1) {z<-z+1}else{z<-z-1};Sys.sleep(0.1)}
compute.estimate()
computestimate
add3 <- function(x,y,z) {
x+y+z
}
add3 <- function(x,y,z) {
x+y+z
}
add3(3,4,5)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
cube <- function(x,n) {
x^3
}
cube(3)
cube(30)
x <- 1:10
if(x>5) {x<-0}
x
x <- 10:1
x
if(x>5) {x<-0}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
cleanws()
library(datasets)
data("iris")
head(iris)
iris
?iris
lapply(iris$Sepal.Length,mean)
sapply(iris$Sepal.Length,mean)
head(iris)
mean(iris$Sepal.Length)
iris
?gl
gl(2, 8, labels = c("Control", "Treat"))
gl(2, 1, 20)
gl(2, 2, 20)
str(iris)
iris$Species
str(iris$Species)
sum(iris$Species)
iris$Species == 'setosa'
sum(iris$Species == 'setosa')
sum(iris$Species == 'versicolor')
sum(iris$Species == 'virginica')
sum(iris$Species == 'virginic')
sum(iris$Species == 'virginica')
gl(3,sum(iris$Species == 'virginica'),labels=c("setosa","versicolor","virginica"))
tapply(iris$Sepal.Length,gl(3,sum(iris$Species == 'virginica'),labels=c("setosa","versicolor","virginica")),mean)
tapply(iris$Sepal.Length,iris$Species,mean)
mean(iris$Sepal.Length[101:150])
head(iris)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
apply(iris[,1:5],2,mean)
apply(iris[,12],2,mean)
apply(iris[,1:2],2,mean)
apply(iris,2,mean)
apply(iris,1,mean)
colMeans(iris)
data("mtcars")
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
str(mtcars)
structure(mtcars)
mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$cyl,mtcars$mpg),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
lapply(mtcars,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
head(mtcars)
sapply(split(mtcars$hp,mtcars$cyl),mean)
a<- sapply(split(mtcars$hp,mtcars$cyl),mean)
a
str(a)
abs(a$8 - a$4)
a["8"]
abs(a["8"] - a["4"])
debug(ls)
ls
lm(y ~ x)
y <- 1:4
x <- 5:6
lm(y ~ x)
system.time()
library(datasets)
head(mtcars)
system.time(head(mtcars))
system.time(mtcars)
system.time({    n <- 1000    r <- numeric(n)    for (i in 1:n) {        x <- rnorm(n)        r[i] <- mean(x)    }})
system.time({    n <- 1000    r <- numeric(n)    for (i in 1:n) {        x <- rnorm(n)        r[i] <- mean(x)    }})
system.time({    n <- 1000;    r <- numeric(n);    for (i in 1:n) { x <- rnorm(n); r[i] <- mean(x)}})
x
system.time({    n <- 1000;    r <- numeric(n);    for (i in 1:n) { x <- rnorm(n); r[i] <- mean(x)}})
r
system.time({    n <- 10000;    r <- numeric(n);    for (i in 1:n) { x <- rnorm(n); r[i] <- mean(x)}})
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
rbinom(1, size = 100, prob = 0.7)
rbinom(5, size = 100, prob = 0.7)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
c=rbind(c(1, -1/4), c(-1/4, 1))
c
d<-solve(c)
d
?solve
m <- NULL
m
?mean
setinverse <- function(solve) m <<- solve
setinverse
setinverse()
setinverse(m)
is.null(c)
!is.null(c)
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/02_R_Programming/assignments/a2/ProgrammingAssignment2/cachematrix.R')
c
makeCacheMatrix(c)
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/02_R_Programming/assignments/a2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(c)
c
a
a = rbind(c(1, -1/4), c(-1/4, 1))
a
makeCacheMatrix(a)
a
str(a)
a = matrix
str(a)
a = matrix(c(1,-1/4,-1/4,1))
a = matrix(c(1,-1/4,-1/4,1),nrow=2,ncol=2)
a
str(a)
makeCacheMatrix(a)
makeCacheMatrix()
cacheSolve(a)
y <- a
a
y
makeCacheMatrix(a)
cacheSolve(a)
source('~/cachemean.R')
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/02_R_Programming/assignments/a2/ProgrammingAssignment2/cachematrix.R')
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/02_R_Programming/assignments/a2/ProgrammingAssignment2/cachemean.R')
b <- vector(1:10)
b <- vector()
b <- vector(c(1:10))
b <- 1:10
b
str(b)
makeVector(b)
cachemean(b)
a
y <- makeCacheMatrix(a)
y
ca
cacheSolve(y)
b
y <- makeVector(b)
cachemean(y)
mean(c(1:10))
clean()
clean
library(ggplot2)
gplot(displ,hwy,data = mpg)
library(ggplot2)
gplot(displ,hwy,data = mpg)
qplot(displ,hwy,data = mpg)
qplot(displ,hwy,data = mpg,color = drv)
qplot(displ,hwy,data = mpg,color = drv,shape=drv)
qplot(displ,hwy,data = mpg,color = drv,shape=drv,geom = c("point","smooth"))
qplot(hwy,data = mgp, fill = drv)
qplot(hwy,data = mpg, fill = drv)
qplot(displ,hwy,data = mpg, facets = .~drv)
qplot(hwy,data = mpg, facets = .~drv)
qplot(hwy,data = mpg, facets = .~drv,binwidth = 2)
qplot(hwy,data = mpg, facets = drvËœ.,binwidth = 2)
qplot(hwy,data = mpg, facets = drv~.,binwidth = 2)
qplot(log(eno),data = maacs)
maacs
setwd("/Users/benwo/Dropbox/Data_science/Coursera_DataScience_JHU/04_Exploratory_Data_Analysis/assignments/a2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
aggregatedTotalByYear <- aggregate(Emissions ~ year, NEI, sum)
png('plot1.png')
barplot(height=aggregatedTotalByYear$Emissions, names.arg=aggregatedTotalByYear$year, xlab="years", ylab=expression('total PM'[2.5]*' emission'),main=expression('Total PM'[2.5]*' emissions at various years'))
dev.off()
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/04_Exploratory_Data_Analysis/assignments/a2/plot1.R')
aggregatedTotalByYear <- aggregate(Emissions ~ year, NEI, sum)
png('plot1.png')
barplot(height=aggregatedTotalByYear$Emissions, names.arg=aggregatedTotalByYear$year, xlab="years", ylab=expression('total PM'[2.5]*' emission'),main=expression('Total PM'[2.5]*' emissions at various years'))
dev.off()
SCC <- readRDS("Source_Classification_Code.rds")
grepl("coal",SCC$EI.Sector,ignore.case = TRUE)
sum(grepl("coal",SCC$EI.Sector,ignore.case = TRUE))
sum(grepl("comb",SCC$EI.Sector,ignore.case = TRUE))
NEI <- readRDS("summarySCC_PM25.rds")
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/04_Exploratory_Data_Analysis/assignments/a2/plot4.R')
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/04_Exploratory_Data_Analysis/assignments/a2/plot4.R')
dev.off()
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/04_Exploratory_Data_Analysis/assignments/a2/plot4.R')
source('~/Dropbox/Data_science/Coursera_DataScience_JHU/04_Exploratory_Data_Analysis/assignments/a2/plot4.R')
sum(grepl("coal", NEISCC$Short.Name, ignore.case=TRUE))
sum(grepl("coal", SCC$Short.Name, ignore.case=TRUE))
sum(grepl("coal",SCC$Short.Name,ignore.case = TRUE))
sum(grepl("coal",SCC$EI.Sector,ignore.case = TRUE))
sum(grepl("comb",SCC$Short.Name,ignore.case = TRUE))
sum(grepl("coal",SCC$Short.Name,ignore.case = TRUE))
