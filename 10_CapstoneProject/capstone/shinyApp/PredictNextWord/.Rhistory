}
if (useKN){
fourgramPred <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$nextword, nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgramsKN_en$mininum) / (minmax$totalFourgramsKN_en$maximum - minmax$totalFourgramsKN_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
} else {
fourgramPred <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$nextword,
nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgrams_en$mininum) / (minmax$totalFourgrams_en$maximum - minmax$totalFourgrams_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
}
if (length(fourgramPred) >= nPred){
return(data.table(prediction = fourgramPred[1:nPred], probability = probability[1:nPred],ngram = ngram))
} else {
predWord <- fourgramPred
predProb <- probability
predNgram <- ngram
# Input is a trigram or smaller or not enough fourgrampreds found
if (length(splitInput) >= 2){
input2 <- paste(tail(splitInput, 2), collapse = " ")
} else {
input2 <- paste(splitInput, collapse = " ")
}
if (useKN){
trigramPred <- rev(ngramData$totalTrigramsKN_en[ngram == input2]$nextword)
if(length(trigramPred) > 0){
count <- rev(tail(ngramData$totalTrigramsKN_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigramsKN_en$mininum) / (minmax$totalTrigramsKN_en$maximum - minmax$totalTrigramsKN_en$mininum)
ngram<-rep("tri",length(trigramPred))
}
} else {
trigramPred <- rev(ngramData$totalTrigrams_en[ngram == input2]$nextword)
if(length(trigramPred) > 0 ){
count <- rev(tail(ngramData$totalTrigrams_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigrams_en$mininum) / (minmax$totalTrigrams_en$maximum - minmax$totalTrigrams_en$mininum)
ngram <- rep("tri",length(trigramPred))
}
}
predWord <- c(predWord, trigramPred)
predProb <- c(predProb, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# Input is a unigram or no trigrampred was found
input2 <- paste(tail(splitInput, 1), collapse = " ")
if (useKN){
bigramPred <- rev(ngramData$totalBigramsKN_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigramsKN_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigramsKN_en$mininum) / (minmax$totalBigramsKN_en$maximum - minmax$totalBigramsKN_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
} else {
bigramPred <- rev(ngramData$totalBigrams_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigrams_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigrams_en$mininum) / (minmax$totalBigrams_en$maximum - minmax$totalBigrams_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
}
predWord <- c(predWord_unique, bigramPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# No matching n-grams found
tokenPred <- rev(tail(ngramData$totalTokens_en$nextword, nPred))
probability <- rep(min(predProb_unique),nPred)
ngram <- rep("uni",nPred)
predWord <- c(predWord_unique, tokenPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
return(data.table(prediction = predWord_unique[1:nPred],probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
}
}
}
}
predictNextword_en(input = gsub('[[:punct:]]', '', "winter is"), ngramData = totalData, useKN = F)
predictNextword_en(input = gsub('[[:punct:]]', '', "winter is"), ngramData = totalData, useKN = T)
runApp()
predictNextword_en(input = gsub('[[:punct:]]', '', "chaos"), ngramData = totalData, useKN = T)
predictNextword_en <- function(input = NULL, ngramData, useKN = T, nPred = 100){
if (is.null(input)) return(NULL)
probability <- character(0)
ngram <- character(0)
input <- tolower(input)
splitInput <- unlist(strsplit(input, split = " "))
# Looking at previous trigrams in order to make use of the fourgram probabilities
if (length(splitInput) > 2){
input2 <- paste(tail(splitInput, 3), collapse = " ")
} else {
input2 <- paste(splitInput, collapse = " ")
}
if (useKN){
fourgramPred <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$nextword, nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgramsKN_en$mininum) / (minmax$totalFourgramsKN_en$maximum - minmax$totalFourgramsKN_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
} else {
fourgramPred <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$nextword,
nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgrams_en$mininum) / (minmax$totalFourgrams_en$maximum - minmax$totalFourgrams_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
}
if (length(fourgramPred) >= nPred){
return(data.table(prediction = fourgramPred[1:nPred], probability = probability[1:nPred],ngram = ngram))
} else {
predWord <- fourgramPred
predProb <- probability
predNgram <- ngram
# Input is a trigram or smaller or not enough fourgrampreds found
if (length(splitInput) >= 2){
input2 <- paste(tail(splitInput, 2), collapse = " ")
} else {
input2 <- paste(splitInput, collapse = " ")
}
if (useKN){
trigramPred <- rev(ngramData$totalTrigramsKN_en[ngram == input2]$nextword)
if(length(trigramPred) > 0){
count <- rev(tail(ngramData$totalTrigramsKN_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigramsKN_en$mininum) / (minmax$totalTrigramsKN_en$maximum - minmax$totalTrigramsKN_en$mininum)
ngram<-rep("tri",length(trigramPred))
}
} else {
trigramPred <- rev(ngramData$totalTrigrams_en[ngram == input2]$nextword)
if(length(trigramPred) > 0 ){
count <- rev(tail(ngramData$totalTrigrams_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigrams_en$mininum) / (minmax$totalTrigrams_en$maximum - minmax$totalTrigrams_en$mininum)
ngram <- rep("tri",length(trigramPred))
}
}
predWord <- c(predWord, trigramPred)
predProb <- c(predProb, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# Input is a unigram or no trigrampred was found
input2 <- paste(tail(splitInput, 1), collapse = " ")
if (useKN){
bigramPred <- rev(ngramData$totalBigramsKN_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigramsKN_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigramsKN_en$mininum) / (minmax$totalBigramsKN_en$maximum - minmax$totalBigramsKN_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
} else {
bigramPred <- rev(ngramData$totalBigrams_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigrams_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigrams_en$mininum) / (minmax$totalBigrams_en$maximum - minmax$totalBigrams_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
}
predWord <- c(predWord_unique, bigramPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# No matching n-grams found
tokenPred <- rev(tail(ngramData$totalUnigrams_en$nextword, nPred))
probability <- rep(min(predProb_unique),nPred)
ngram <- rep("uni",nPred)
predWord <- c(predWord_unique, tokenPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
return(data.table(prediction = predWord_unique[1:nPred],probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
}
}
}
}
predictNextword_en(input = gsub('[[:punct:]]', '', "chaos"), ngramData = totalData, useKN = T)
runApp()
ngramData$totalBigrams_en
ngramData$totalBigrams_en$ngram
ngramData$totalBigrams_en$ngram == "chaos"
sum(ngramData$totalBigrams_en$ngram == "chaos")
"archipel" in ngramData$totalBigrams_en$ngram
"archipel" %in% ngramData$totalBigrams_en$ngram
"archipel" %in% ngramData$totalTrigrams_en$ngram
"the" %in% ngramData$totalTrigrams_en$ngram
ngramData$totalTrigrams_en$ngram
ngramData$totalBigrams_en$ngram
"chaos" %in% ngramData$totalBigrams_en$ngram
"archipel" %in% ngramData$totalBigrams_en$ngram
runApp()
input=""
input
is.null(input)
predictNextword_en(input = gsub('[[:punct:]]', '', "chaos"), ngramData = totalData, useKN = T)
predictNextword_en(input = gsub('[[:punct:]]', '', ""), ngramData = totalData, useKN = T)
runApp()
predProb_unique
if character(0)
predictNextword_en <- function(input = NULL, ngramData, useKN = T, nPred = 100){
if (is.null(input)) return(NULL)
probability <- character(0)
ngram <- character(0)
input <- tolower(input)
splitInput <- unlist(strsplit(input, split = " "))
# Looking at previous trigrams in order to make use of the fourgram probabilities
if (length(splitInput) > 2){
input2 <- paste(tail(splitInput, 3), collapse = " ")
} else {
input2 <- paste(splitInput, collapse = " ")
}
if (useKN){
fourgramPred <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$nextword, nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgramsKN_en$mininum) / (minmax$totalFourgramsKN_en$maximum - minmax$totalFourgramsKN_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
} else {
fourgramPred <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$nextword,
nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgrams_en$mininum) / (minmax$totalFourgrams_en$maximum - minmax$totalFourgrams_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
}
if (length(fourgramPred) >= nPred){
return(data.table(prediction = fourgramPred[1:nPred], probability = probability[1:nPred],ngram = ngram))
} else {
predWord <- fourgramPred
predProb <- probability
predNgram <- ngram
# Input is a trigram or smaller or not enough fourgrampreds found
if (length(splitInput) >= 2){
input2 <- paste(tail(splitInput, 2), collapse = " ")
} else {
input2 <- paste(splitInput, collapse = " ")
}
if (useKN){
trigramPred <- rev(ngramData$totalTrigramsKN_en[ngram == input2]$nextword)
if(length(trigramPred) > 0){
count <- rev(tail(ngramData$totalTrigramsKN_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigramsKN_en$mininum) / (minmax$totalTrigramsKN_en$maximum - minmax$totalTrigramsKN_en$mininum)
ngram<-rep("tri",length(trigramPred))
}
} else {
trigramPred <- rev(ngramData$totalTrigrams_en[ngram == input2]$nextword)
if(length(trigramPred) > 0 ){
count <- rev(tail(ngramData$totalTrigrams_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigrams_en$mininum) / (minmax$totalTrigrams_en$maximum - minmax$totalTrigrams_en$mininum)
ngram <- rep("tri",length(trigramPred))
}
}
predWord <- c(predWord, trigramPred)
predProb <- c(predProb, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# Input is a unigram or no trigrampred was found
input2 <- paste(tail(splitInput, 1), collapse = " ")
if (useKN){
bigramPred <- rev(ngramData$totalBigramsKN_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigramsKN_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigramsKN_en$mininum) / (minmax$totalBigramsKN_en$maximum - minmax$totalBigramsKN_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
} else {
bigramPred <- rev(ngramData$totalBigrams_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigrams_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigrams_en$mininum) / (minmax$totalBigrams_en$maximum - minmax$totalBigrams_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
}
predWord <- c(predWord_unique, bigramPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# No matching n-grams found
tokenPred <- rev(tail(ngramData$totalUnigrams_en$nextword, nPred))
if (predProb_unique != character(0)){
probability <- rep(min(predProb_unique),nPred)
} else {
probability <- rep(0,nPred)
}
ngram <- rep("uni",nPred)
predWord <- c(predWord_unique, tokenPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
return(data.table(prediction = predWord_unique[1:nPred],probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
}
}
}
}
predictNextword_en(input = gsub('[[:punct:]]', '', ""), ngramData = totalData, useKN = T)
predictNextword_en(input = gsub('[[:punct:]]', 'archipel', ""), ngramData = totalData, useKN = T)
predictNextword_en(input = gsub('[[:punct:]]', '', "archipel"), ngramData = totalData, useKN = T)
predictNextword_en(input = gsub('[[:punct:]]', '', "winter is"), ngramData = totalData, useKN = T)
predictNextword_en(input = gsub('[[:punct:]]', '', "chaos"), ngramData = totalData, useKN = T)
ngramData$totalUnigrams_en
ngramData$totalUnigrams_en$nextword
"archipel" %in% ngramData$totalUnigrams_en$nextword
"chaos" %in% ngramData$totalUnigrams_en$nextword
minmax
predictNextword_en <- function(input = NULL, ngramData, useKN = T, nPred = 100){
if (is.null(input)) return(NULL)
probability <- character(0)
ngram <- character(0)
input <- tolower(input)
splitInput <- unlist(strsplit(input, split = " "))
# Looking at previous trigrams in order to make use of the fourgram probabilities
if (length(splitInput) > 2){
input2 <- paste(tail(splitInput, 3), collapse = " ")
} else {
input2 <- paste(splitInput, collapse = " ")
}
if (useKN){
fourgramPred <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$nextword, nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgramsKN_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgramsKN_en$mininum) / (minmax$totalFourgramsKN_en$maximum - minmax$totalFourgramsKN_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
} else {
fourgramPred <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$nextword,
nPred))
if(length(fourgramPred) > 0 ){
count <- rev(tail(ngramData$totalFourgrams_en[ngram == input2]$count, length(fourgramPred)))
probability <- (count - minmax$totalFourgrams_en$mininum) / (minmax$totalFourgrams_en$maximum - minmax$totalFourgrams_en$mininum)
ngram <- rep("four",length(fourgramPred))
}
}
if (length(fourgramPred) >= nPred){
return(data.table(prediction = fourgramPred[1:nPred], probability = probability[1:nPred],ngram = ngram))
} else {
predWord <- fourgramPred
predProb <- probability
predNgram <- ngram
# Input is a trigram or smaller or not enough fourgrampreds found
if (length(splitInput) >= 2){
input2 <- paste(tail(splitInput, 2), collapse = " ")
} else {
input2 <- paste(splitInput, collapse = " ")
}
if (useKN){
trigramPred <- rev(ngramData$totalTrigramsKN_en[ngram == input2]$nextword)
if(length(trigramPred) > 0){
count <- rev(tail(ngramData$totalTrigramsKN_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigramsKN_en$mininum) / (minmax$totalTrigramsKN_en$maximum - minmax$totalTrigramsKN_en$mininum)
ngram<-rep("tri",length(trigramPred))
}
} else {
trigramPred <- rev(ngramData$totalTrigrams_en[ngram == input2]$nextword)
if(length(trigramPred) > 0 ){
count <- rev(tail(ngramData$totalTrigrams_en[ngram == input2]$count, length(trigramPred)))
probability <- (count - minmax$totalTrigrams_en$mininum) / (minmax$totalTrigrams_en$maximum - minmax$totalTrigrams_en$mininum)
ngram <- rep("tri",length(trigramPred))
}
}
predWord <- c(predWord, trigramPred)
predProb <- c(predProb, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# Input is a unigram or no trigrampred was found
input2 <- paste(tail(splitInput, 1), collapse = " ")
if (useKN){
bigramPred <- rev(ngramData$totalBigramsKN_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigramsKN_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigramsKN_en$mininum) / (minmax$totalBigramsKN_en$maximum - minmax$totalBigramsKN_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
} else {
bigramPred <- rev(ngramData$totalBigrams_en[ngram == input2]$nextword)
if(length(bigramPred) > 0){
count <- rev(tail(ngramData$totalBigrams_en[ngram == input2]$count, length(bigramPred)))
probability <- (count - minmax$totalBigrams_en$mininum) / (minmax$totalBigrams_en$maximum - minmax$totalBigrams_en$mininum)
ngram <- rep("bi",length(bigramPred))
}
}
predWord <- c(predWord_unique, bigramPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
if (length(predWord_unique) >= nPred){
return(data.table(prediction = predWord_unique[1:nPred], probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
} else {
# No matching n-grams found
if (input2 %in% ngramData$totalUnigrams_en$nextword) {
unigramPred <- input2
count <- ngramData$totalUnigrams_en[nextword == input2]$count
probability <- (count - minmax$totalUnigrams_en$mininum) / (minmax$totalUnigrams_en$maximum - minmax$totalUnigrams_en$mininum)
ngram <- "uni"
} else {
unigramPred <- rev(tail(ngramData$totalUnigrams_en$nextword, nPred))
probability <- rep(0,nPred)
ngram <- rep("uni",nPred)
}
predWord <- c(predWord_unique, unigramPred)
predProb <- c(predProb_unique, probability)
predNgram <- c(predNgram, ngram)
predWordConf_unique <- find_unique_words_with_max_probability(predWord,predProb,predNgram)
predWord_unique <-as.vector(unlist(predWordConf_unique[1]))
predProb_unique <-as.vector(unlist(predWordConf_unique[2]))
predNgram_unique <-as.vector(unlist(predWordConf_unique[3]))
return(data.table(prediction = predWord_unique[1:nPred],probability = predProb_unique[1:nPred], ngram = predNgram_unique[1:nPred]))
}
}
}
}
predictNextword_en(input = gsub('[[:punct:]]', '', "chaos"), ngramData = totalData, useKN = T)
predictNextword_en(input = gsub('[[:punct:]]', '', "archipel"), ngramData = totalData, useKN = T)
runApp()
runApp()
runApp()
runApp()
runApp()
require('devtools')
devtools::install_github('rstudio/shinyapps')
require('shinyapps')
install.packages("devtools")
require('devtools')
devtools::install_github('rstudio/shinyapps')
require('shinyapps')
install.packages("shinyapps")
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='benwol', token='C52ECABB41E1C4CF707D20A8658934F0', secret='lneR5D/6ssQyq3uogPa534Kzcuk3YjbX3ArfGu87')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
runApp()
