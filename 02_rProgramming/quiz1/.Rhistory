a
a <- available.packages()
a
head(rownames(a),5)
head(rownames(a),50:60)
head(rownames(a),50)
install.packages("slidify")
install.packages(c("slidify","ggplot2","devtools")
)
install.packages("solidify")
install.packages(c("class", "foreign", "MASS", "nlme", "nnet", "spatial"))
library(ggplot2)
search()
install.packages("solidify")
install.packages("slidify")
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
install_github(pkgs)
install.packages("KernSmooth")
library(KernSmooth)
library(devtools)
install_github("swirldev/swirl")
library(swirl)
swirl()
swirl()
5+7
x <- 5 + 7
x
y < - x-3
y <- x-3
y
z <- c(1.1,9,3.14)
bye()
swirl()
library(swirl)
swirl()
?c
z
c(z,555,z)
z*2+100
bye()
exit
library(swirl)
swirl()
my_sqrt <- sqrt(z) -1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
print(my_div)
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files
)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
getwd()
setwd(testdir)
setwd("testdir"
)
file.create("mytest.R")
list.files()
getwd()
file.exists("mytest.R")
file.info("mytest.R")
file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
play()
getwd()
ls()
list.files()
nxt()
file.path("myfile3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1","folder2")
play()
file.list()
list.files()
getwd()
nxt()
$dir.create
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
play()
?unlink()
list.files()
cd testdir2
nxt()
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir",recursive=TRUE)
library(swirl)
?swirl
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls.list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[:,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
play()
flags$Germany
flags
flags$Germany-GDR
flags$Germany-DDR
nxt()
play()
flags["Germany-DDR",]
flags[100,]
nxt()
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique()
unique_vals
lapply(unique_vals,lenght)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
play()
object.size(flags)
object.size(cls_list)
nxt()
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips <-sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
require(graphics)
# Compute P(45 < X < 55) for X Binomial(100,0.5)
sum(dbinom(46:54, 100, 0.5))
## Using "log = TRUE" for an extended range :
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
## extreme points are omitted since dbinom gives 0.
mtext("dbinom(k, log=TRUE)", adj = 0)
mtext("extended range", adj = 0, line = -1, font = 4)
mtext("log(dbinom(k))", col = "red", adj = 1)
library(swirl)
swirl()
exit
exit()
install_from_swirl("Data Analysis")
warning()
10
warning(10)
swirl()
install_from_swirl("Open Intro")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
exit
install_from_swirl("Regression Models")
install_from_swirl("Statistical Inference")
swirl()
swirl()
exit
for i = 1:100
a = 0
for (i in 1:100 ) {
a = a + 1/i
}
a
for (i in 1:100 ) {a = a + 1/i}
a=0
for (i in 1:100 ) {a = a + 1/i}
a
a=0
for (i in 1:100 ) {a + 1/i}
for (i in 1:100 ) {a <- a + 1/i}
1\ln(100)
ln(100)
log(100)
1/log(100)
a=0
for (i in 1:1000 ) {a <- a + 1/i}
a
a=0
for (i in 1:10000 ) {a <- a + 1/i}
a
a=0
for (i in 1:10 ) {a <- a + 1/i}
a
library(swirl)
swirl()
swirl()
?read.csv
mydf <- read.csv(path2csv,stringsAsFactor = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
path2csv
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_ip,package,country)
select(cran, ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, X:size, -5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
3.0.3-3.0.2
3.0.3 < 3.0.2
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version) , ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size / 2Ë†20)
mutate(cran3,size_mb = size / 2^20)
mutate(cran3,size_mb = size / 2^20,size_gb = size_mb / 2^10)
mutate(cran3,correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 !=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-
| sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(ints>0)
exit
a <- c(1,2,3)
b <- c(5,7,8,9)
cbind(a,b)
a <- c(1,2,3,4)
cbind(a,b)
x <- 1:3
names(x) <- c("wupi","pupi","kaki")
x
dimnames(x) <- list("kali",c("wupi","pupi","kaki"))
y <- 5:7
rbind(x,y)
dimnames(x) <- list(c("kali","falli"),c("wupi","pupi","kaki"))
rownames(x) <- c("kali","falli")
row.names(x) <- c("kali","falli")
?row.names
m <- rbind(x,y)
dimnames(m) <- list(c("kali","falli"),c("wupi","pupi","kaki"))
m
x <- 4
class(x)
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
x
y <- c(3, 2, 10)
y
cbind(x,y)
m <- cbind(x,y)
dim(cbind(x,y))
x <- list(2, "a", "b", TRUE)
x[2]
x[[2]]
class(x[[2]])
class(x[2])
x <- 1:4
y <- 2
x+y
class(x+y)
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x> 10] <- 4
x
x[x> 10] == 4
getwd(0)
getwd()
setwd("/Users/benwo/Dropbox/Data_science/Coursera_DataScience_JHU/02_R_Programming/assignments")
getwd()
ls()
list.files
list.files()
cd quiz1
setwd("/Users/benwo/Dropbox/Data_science/Coursera_DataScience_JHU/02_R_Programming/assignments/quiz1")
list.files()
hw1 <- read.csv("hw1_data.csv")
hw1
head(hw1)
rm(hw1)
hw1 <- read.csv("hw1_data.csv")
head(hw1)
hw1[1:2]
hw1[1:2,]
dim(hw1)
dim <- dim(hw1)
dim
dim(1)
dim[1]
hw1[(dim[1]-1):dim[1],]
foot(hw1)
tail(hw1)
hw1$Ozone[47]
hw1[47,"Ozone"]
hw1[47,1]
is.na(hw1$Ozone)
sum(is.na(hw1$Ozone))
sum(is.nan(hw1$Ozone))
is.nan(hw1[1,])
is.na(hw1[1,])
is.na(hw1[,1])
is.nan(hw1[,1])
sum(is.nan(hw1[,1]))
sum(is.na(hw1[,1]))
hw1_ozone <- hw1$Ozone
hw1_ozone
hw1_ozone_clean <- hw1_ozone(!is.na(hw1_ozone))
hw1_ozone
is.na(hw1_ozone)
!is.na(hw1_ozone)
hw1_ozone(!is.na(hw1_ozone))
hw1_ozone[!is.na(hw1_ozone)]
hw1_ozone_clean <- hw1_ozone[!is.na(hw1_ozone)]
mean(hw1_ozone_clean)
mean(hw1_ozone)
mean(hw1)
q18 <- hw1[hw1$Ozone > 31 & hw1$Temp > 90]
hw1
head(hw1)
hw1_clean <- hw1[!is.na(hw1)]
hw1_clean
dim(hw1_clean)
class(hw1_clean)
hw1[,"Ozone"]
hw1$Ozone > 31
hw1$Temp >90
which(hw1$Temp >90)
which(hw1$Ozone > 31)
b <-which(hw1$Temp >90)
a <- which(hw1$Ozone > 31)
a == b
b <-hw1$Temp >90
a <- hw1$Ozone > 31
a
b
a == b
hw1[hw1$Ozone>31]
hw1[hw1$Ozone>31,]
hw1[!is.na(hw1$Ozone),]
hw1
summary(hw1)
hw1[!is.na(hw1$Ozone),]
a <- hw1[!is.na(hw1$Ozone),]
a
head(a)
a[a$Ozone > 31,]
b<-a[a$Ozone > 31,]
is.na(b$Temp)
sum(is.na(b$Temp))
c<-b[b$Temp > 90,]
c
mean(c$Solar.R)
hw1
head(hw1)
a <- hw1[hw1$Month == 6,]
a
mean(a$Temp)
a <- hw1[hw1$Month == 5,]
a
head(a)
b <- a[!is.na(a$Ozone),]
b
a
a
b
is.na(a$Ozone)
b <- a(!is.na(a$Ozone),)
b <- a[!is.na(a$Ozone),]
b
max(b$Ozone)
max(a$Ozone)
